{
   "chart.json": {
      "apiVersion": "v1",
      "description": "CockroachDB is a scalable, survivable, strongly-consistent SQL database.",
      "engine": "gotpl",
      "home": "https://www.cockroachlabs.com",
      "icon": "https://raw.githubusercontent.com/cockroachdb/cockroach/master/docs/media/cockroach_db.png",
      "maintainers": [
         {
            "email": "alex@cockroachlabs.com",
            "name": "Alex Robinson"
         }
      ],
      "name": "cockroachdb",
      "sources": [
         "https://github.com/cockroachdb/cockroach"
      ],
      "version": "0.2.2"
   },
   "disruptionPolicy.json": {
      "apiVersion": "policy/v1beta1",
      "kind": "PodDisruptionBudget",
      "metadata": {
         "annotations": { },
         "labels": {
            "app": "3-cockroachdb",
            "chart": "cockroachdb",
            "component": "3-cockroachdb",
            "heritage": "tiller",
            "release": "3"
         },
         "name": "3-cockroachdb-budget"
      },
      "spec": {
         "minAvailable": "67%",
         "selector": {
            "matchLabels": {
               "component": "3-cockroachdb"
            }
         }
      }
   },
   "privateService.json": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
         "annotations": {
            "prometheus.io/path": "_status/vars",
            "prometheus.io/port": "8080",
            "prometheus.io/scrape": true,
            "service.alpha.kubernetes.io/tolerate-unready-endpoints": true
         },
         "labels": {
            "app": "3-cockroachdb",
            "chart": "cockroachdb",
            "component": "3-cockroachdb",
            "heritage": "tiller",
            "release": "3"
         },
         "name": "3-cockroachdb"
      },
      "spec": {
         "clusterIP": "None",
         "ports": [
            {
               "name": "grpc",
               "port": 26257,
               "targetPort": 26257
            },
            {
               "name": "http",
               "port": 8080,
               "targetPort": 8080
            }
         ],
         "selector": {
            "component": "3-cockroachdb"
         }
      }
   },
   "publicService.json": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
         "annotations": { },
         "labels": {
            "app": "3-cockroachdb",
            "chart": "cockroachdb",
            "component": "3-cockroachdb",
            "heritage": "tiller",
            "release": "3"
         },
         "name": "3-cockroachdb-public"
      },
      "spec": {
         "ports": [
            {
               "name": "grpc",
               "port": 26257,
               "targetPort": 26257
            },
            {
               "name": "http",
               "port": 8080,
               "targetPort": 8080
            }
         ],
         "selector": {
            "component": "3-cockroachdb"
         }
      }
   },
   "statefulSet.json": {
      "apiVersion": "apps/v1beta1",
      "kind": "StatefulSet",
      "metadata": {
         "annotations": { },
         "labels": { },
         "name": "3-cockroachdb"
      },
      "spec": {
         "replicas": 3,
         "serviceName": "3-cockroachdb",
         "template": {
            "metadata": {
               "annotations": {
                  "pod.alpha.kubernetes.io/init-containers": "[\n    {\n        \"name\": \"bootstrap\",\n        \"image\": \"{{.Values.BootstrapImage}}:{{.Values.BootstrapImageTag}}\",\n        \"imagePullPolicy\": \"{{.Values.ImagePullPolicy}}\",\n        \"args\": [\n          \"-on-start=/on-start.sh\",\n          \"-service={{ printf \"%s-%s\" .Release.Name .Values.Name | trunc 56 }}\"\n        ],\n        \"env\": [\n          {\n              \"name\": \"POD_NAMESPACE\",\n              \"valueFrom\": {\n                  \"fieldRef\": {\n                      \"apiVersion\": \"v1\",\n                      \"fieldPath\": \"metadata.namespace\"\n                  }\n              }\n            }\n        ],\n        \"volumeMounts\": [\n            {\n                \"name\": \"datadir\",\n                \"mountPath\": \"/cockroach/cockroach-data\"\n            }\n        ]\n    }\n]\n",
                  "scheduler.alpha.kubernetes.io/affinity": "{\n  \"podAntiAffinity\": {\n    \"preferredDuringSchedulingIgnoredDuringExecution\": [{\n      \"weight\": 100,\n      \"labelSelector\": {\n        \"matchExpressions\": [{\n          \"key\": \"component\",\n          \"operator\": \"In\",\n          \"values\": [\"{{.Release.Name}}-{{.Values.Component}}\"]\n        }]\n      },\n      \"topologyKey\": \"kubernetes.io/hostname\"\n    }]\n  }\n}\n"
               },
               "labels": {
                  "app": "3-cockroachdb",
                  "chart": "cockroachdb",
                  "component": "3-cockroachdb",
                  "heritage": "tiller",
                  "release": "3"
               }
            },
            "spec": {
               "containers": [
                  {
                     "command": [
                        "/bin/bash",
                        "-ecx",
                        "# The use of qualified `hostname -f` is crucial:\n# Other nodes aren't able to look up the unqualified hostname.\nCRARGS=(\"start\" \"--logtostderr\" \"--insecure\" \"--host\" \"$(hostname -f)\" \"--http-host\" \"0.0.0.0\")\n# We only want to initialize a new cluster (by omitting the join flag)\n# if we're sure that we're the first node (i.e. index 0) and that\n# there aren't any other nodes running as part of the cluster that\n# this is supposed to be a part of (which indicates that a cluster\n# already exists and we should make sure not to create a new one).\n# It's fine to run without --join on a restart if there aren't any\n# other nodes.\nif [ ! \"$(hostname)\" == \"${STATEFULSET_NAME}-0\" ] || \\\n    [ -e \"/cockroach/cockroach-data/cluster_exists_marker\" ]\nthen\n  CRARGS+=(\"--join\" \"${STATEFULSET_NAME}-public\")\nfi\nexec /cockroach/cockroach ${CRARGS[*]}\n"
                     ],
                     "env": [
                        {
                           "name": "STATEFULSET_NAME",
                           "value": "3-cockroachdb"
                        }
                     ],
                     "image": "cockroachdb/cockroach:latest",
                     "imagePullPolicy": "Always",
                     "livenessProbe": {
                        "httpGet": {
                           "path": "/_admin/v1/health",
                           "port": "http"
                        },
                        "initialDelaySeconds": 30,
                        "timeoutSeconds": 1
                     },
                     "name": "3-cockroachdb",
                     "ports": [
                        {
                           "containerPort": 26257,
                           "name": "grpc"
                        },
                        {
                           "containerPort": 8080,
                           "name": "http"
                        }
                     ],
                     "readinessProbe": {
                        "httpGet": {
                           "path": "/_admin/v1/health",
                           "port": "http"
                        },
                        "initialDelaySeconds": 30,
                        "timeoutSeconds": 1
                     },
                     "resources": {
                        "requests": {
                           "cpu": "100m",
                           "memory": "512Mi"
                        }
                     },
                     "volumeMounts": [
                        {
                           "mountPath": "/cockroach/cockroach-data",
                           "name": "datadir",
                           "readOnly": false
                        }
                     ]
                  }
               ],
               "volumes": [
                  {
                     "name": "datadir",
                     "persistentVolumeClaim": {
                        "claimName": "datadir"
                     }
                  }
               ]
            }
         },
         "volumeClaimTemplates": [
            {
               "apiVersion": "v1",
               "kind": "PersistentVolumeClaim",
               "metadata": {
                  "annotations": {
                     "volume.alpha.kubernetes.io/storage-class": "anything"
                  },
                  "labels": { },
                  "name": "datadir"
               },
               "spec": {
                  "accessModes": [
                     "ReadWriteOnce"
                  ],
                  "resources": {
                     "requests": {
                        "storage": "1Gi"
                     }
                  }
               }
            }
         ]
      }
   }
}
