{
   "gitlab-build-patches.json": {
      "apiVersion": "v1",
      "data": {
         "fix-git-hooks.patch": "diff --git a/app/models/repository.rb b/app/models/repository.rb\nindex 30be726243..0776c7ccc5 100644\n--- a/app/models/repository.rb\n+++ b/app/models/repository.rb\n@@ -160,14 +160,18 @@ class Repository\n    tags.find { |tag| tag.name == name }\n  end\n\n-  def add_branch(user, branch_name, target)\n+  def add_branch(user, branch_name, target, with_hooks: true)\n    oldrev = Gitlab::Git::BLANK_SHA\n    ref    = Gitlab::Git::BRANCH_REF_PREFIX + branch_name\n    target = commit(target).try(:id)\n\n    return false unless target\n\n-    GitHooksService.new.execute(user, path_to_repo, oldrev, target, ref) do\n+    if with_hooks\n+      GitHooksService.new.execute(user, path_to_repo, oldrev, target, ref) do\n+        update_ref!(ref, target, oldrev)\n+      end\n+    else\n      update_ref!(ref, target, oldrev)\n    end\n\ndiff --git a/app/services/commits/change_service.rb b/app/services/commits/change_service.rb\nindex 1c82599c57..2d4c9788d0 100644\n--- a/app/services/commits/change_service.rb\n+++ b/app/services/commits/change_service.rb\n@@ -55,7 +55,7 @@ module Commits\n      return success if repository.find_branch(new_branch)\n\n      result = CreateBranchService.new(@project, current_user)\n-                                  .execute(new_branch, @target_branch, source_project: @source_project)\n+                                  .execute(new_branch, @target_branch, source_project: @source_project, with_hooks: false)\n\n      if result[:status] == :error\n        raise ChangeError, \"There was an error creating the source branch: #{result[:message]}\"\ndiff --git a/app/services/create_branch_service.rb b/app/services/create_branch_service.rb\nindex 757fc35a78..a6a3461e17 100644\n--- a/app/services/create_branch_service.rb\n+++ b/app/services/create_branch_service.rb\n@@ -1,5 +1,5 @@\nclass CreateBranchService < BaseService\n-  def execute(branch_name, ref, source_project: @project)\n+  def execute(branch_name, ref, source_project: @project, with_hooks: true)\n    valid_branch = Gitlab::GitRefValidator.validate(branch_name)\n\n    unless valid_branch\n@@ -26,7 +26,7 @@ class CreateBranchService < BaseService\n\n                    repository.find_branch(branch_name)\n                  else\n-                   repository.add_branch(current_user, branch_name, ref)\n+                   repository.add_branch(current_user, branch_name, ref, with_hooks: with_hooks)\n                  end\n\n    if new_branch\ndiff --git a/app/services/files/base_service.rb b/app/services/files/base_service.rb\nindex 9bd4bd464f..1802b932e0 100644\n--- a/app/services/files/base_service.rb\n+++ b/app/services/files/base_service.rb\n@@ -74,7 +74,7 @@ module Files\n    end\n\n    def create_target_branch\n-      result = CreateBranchService.new(project, current_user).execute(@target_branch, @source_branch, source_project: @source_project)\n+      result = CreateBranchService.new(project, current_user).execute(@target_branch, @source_branch, source_project: @source_project, with_hooks: false)\n\n      unless result[:status] == :success\n        raise_error(\"Something went wrong when we tried to create #{@target_branch} for you: #{result[:message]}\")\n"
      },
      "kind": "ConfigMap",
      "metadata": {
         "name": "gitlab-patches",
         "namespace": "gitlab"
      }
   },
   "gitlab-config-storage.json": {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
         "annotations": {
            "volume.beta.kubernetes.io/storage-class": "fast"
         },
         "name": "gitlab-config-storage",
         "namespace": "gitlab"
      },
      "spec": {
         "accessModes": [
            "ReadWriteMany"
         ],
         "resources": {
            "requests": {
               "storage": "1Gi"
            }
         }
      }
   },
   "gitlab-config.json": {
      "apiVersion": "v1",
      "data": {
         "external_hostname": "gitlab.\"gitlab.io\"",
         "external_scheme": "https",
         "mattermost_app_uid": "aadas",
         "mattermost_external_hostname": "mattermost.\"gitlab.io\"",
         "mattermost_external_scheme": "https",
         "postgres_db": "gitlab_production",
         "postgres_user": "gitlab",
         "registry_external_hostname": "registry.\"gitlab.io\"",
         "registry_external_scheme": "https"
      },
      "kind": "ConfigMap",
      "metadata": {
         "name": "gitlab-config",
         "namespace": "gitlab"
      }
   },
   "gitlab-deployment.json": {
      "apiVersion": "extensions/v1beta1",
      "kind": "Deployment",
      "metadata": {
         "labels": { },
         "name": "gitlab",
         "namespace": "gitlab"
      },
      "spec": {
         "replicas": 1,
         "template": {
            "metadata": {
               "annotations": { },
               "labels": {
                  "app": "gitlab",
                  "name": "gitlab"
               }
            },
            "spec": {
               "containers": [
                  {
                     "command": [
                        "/bin/bash",
                        "-c",
                        "patch -p1 -d /opt/gitlab/embedded/service/gitlab-rails < /patches/fix-git-hooks.patch && sed -i \"s/environment ({'GITLAB_ROOT_PASSWORD' => initial_root_password }) if initial_root_password/environment ({'GITLAB_ROOT_PASSWORD' => initial_root_password, 'GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN' => node['gitlab']['gitlab-rails']['initial_shared_runners_registration_token'] })/g\" /opt/gitlab/embedded/cookbooks/gitlab/recipes/database_migrations.rb && exec /assets/wrapper"
                     ],
                     "env": [
                        {
                           "name": "GITLAB_EXTERNAL_HOSTNAME",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "external_hostname",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "GITLAB_EXTERNAL_SCHEME",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "external_scheme",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "GITLAB_MATTERMOST_EXTERNAL_HOSTNAME",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "mattermost_external_hostname",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "GITLAB_MATTERMOST_EXTERNAL_SCHEME",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "mattermost_external_scheme",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "GITLAB_REGISTRY_EXTERNAL_HOSTNAME",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "registry_external_hostname",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "GITLAB_REGISTRY_EXTERNAL_SCHEME",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "registry_external_scheme",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "MATTERMOST_APP_UID",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "mattermost_app_uid",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "POSTGRES_DB",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "postgres_db",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "POSTGRES_USER",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "postgres_user",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "GITLAB_INITIAL_SHARED_RUNNERS_REGISTRATION_TOKEN",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "initial_shared_runners_registration_token",
                                 "name": "gitlab-secrets"
                              }
                           }
                        },
                        {
                           "name": "MATTERMOST_APP_SECRET",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "mattermost_app_secret",
                                 "name": "gitlab-secrets"
                              }
                           }
                        },
                        {
                           "name": "POSTGRES_PASSWORD",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "postgres_password",
                                 "name": "gitlab-secrets"
                              }
                           }
                        },
                        {
                           "name": "GITLAB_POST_RECONFIGURE_SCRIPT",
                           "value": "/opt/gitlab/bin/gitlab-rails runner -e production 'Doorkeeper::Application.where(uid: ENV[\"MATTERMOST_APP_UID\"], secret: ENV[\"MATTERMOST_APP_SECRET\"], redirect_uri: \"#{ENV[\"GITLAB_MATTERMOST_EXTERNAL_SCHEME\"]}://#{ENV[\"GITLAB_MATTERMOST_EXTERNAL_HOSTNAME\"]}/signup/gitlab/complete\\r\\n#{ENV[\"GITLAB_MATTERMOST_EXTERNAL_SCHEME\"]}://#{ENV[\"GITLAB_MATTERMOST_EXTERNAL_HOSTNAME\"]}/login/gitlab/complete\", name: \"GitLab Mattermost\").first_or_create;'\n"
                        },
                        {
                           "name": "GITLAB_OMNIBUS_CONFIG",
                           "value": "external_url \"#{ENV['GITLAB_EXTERNAL_SCHEME']}://#{ENV['GITLAB_EXTERNAL_HOSTNAME']}\"\nregistry_external_url \"#{ENV['GITLAB_REGISTRY_EXTERNAL_SCHEME']}://#{ENV['GITLAB_REGISTRY_EXTERNAL_HOSTNAME']}\"\nmattermost_external_url \"#{ENV['GITLAB_MATTERMOST_EXTERNAL_SCHEME']}://#{ENV['GITLAB_MATTERMOST_EXTERNAL_HOSTNAME']}\"\n\ngitlab_rails['initial_shared_runners_registration_token'] = ENV['GITLAB_INITIAL_SHARED_RUNNERS_REGISTRATION_TOKEN']\n\nnginx['enable'] = false\nregistry_nginx['enable'] = false\nmattermost_nginx['enable'] = false\n\ngitlab_workhorse['listen_network'] = 'tcp'\ngitlab_workhorse['listen_addr'] = '0.0.0.0:8005'\n\nmattermost['service_address'] = '0.0.0.0'\nmattermost['service_port'] = '8065'\n\nregistry['registry_http_addr'] = '0.0.0.0:8105'\n\npostgresql['enable'] = false\ngitlab_rails['db_host'] = 'gitlab-postgresql'\ngitlab_rails['db_password'] = ENV['POSTGRES_PASSWORD']\ngitlab_rails['db_username'] = ENV['POSTGRES_USER']\ngitlab_rails['db_database'] = ENV['POSTGRES_DB']\n\nredis['enable'] = false\ngitlab_rails['redis_host'] = 'gitlab-redis'\n\nmattermost['file_directory'] = '/gitlab-data/mattermost';\nmattermost['sql_driver_name'] = 'postgres';\nmattermost['sql_data_source'] = \"user=#{ENV['POSTGRES_USER']} host=gitlab-postgresql port=5432 dbname=mattermost_production password=#{ENV['POSTGRES_PASSWORD']} sslmode=disable\";\nmattermost['gitlab_enable'] = true;\nmattermost['gitlab_secret'] = ENV['MATTERMOST_APP_SECRET'];\nmattermost['gitlab_id'] = ENV['MATTERMOST_APP_UID'];\nmattermost['gitlab_scope'] = '';\nmattermost['gitlab_auth_endpoint'] = \"#{ENV['GITLAB_EXTERNAL_SCHEME']}://#{ENV['GITLAB_EXTERNAL_HOSTNAME']}/oauth/authorize\";\nmattermost['gitlab_token_endpoint'] = \"#{ENV['GITLAB_EXTERNAL_SCHEME']}://#{ENV['GITLAB_EXTERNAL_HOSTNAME']}/oauth/token\";\nmattermost['gitlab_user_api_endpoint'] = \"#{ENV['GITLAB_EXTERNAL_SCHEME']}://#{ENV['GITLAB_EXTERNAL_HOSTNAME']}/api/v3/user\"\n\nmanage_accounts['enable'] = true\nmanage_storage_directories['manage_etc'] = false\n\ngitlab_shell['auth_file'] = '/gitlab-data/ssh/authorized_keys'\ngit_data_dir '/gitlab-data/git-data'\ngitlab_rails['shared_path'] = '/gitlab-data/shared'\ngitlab_rails['uploads_directory'] = '/gitlab-data/uploads'\ngitlab_ci['builds_directory'] = '/gitlab-data/builds'\ngitlab_rails['registry_path'] = '/gitlab-registry'\ngitlab_rails['trusted_proxies'] = [\"10.0.0.0/8\",\"172.16.0.0/12\",\"192.168.0.0/16\"]\n\nprometheus['enable'] = true\nnode_exporter['enable'] = true\n"
                        }
                     ],
                     "image": "gitlab/gitlab-ce:8.16.2-ce.0",
                     "imagePullPolicy": "IfNotPresent",
                     "livenessProbe": {
                        "httpGet": {
                           "path": "/help",
                           "port": 8005
                        },
                        "initialDelaySeconds": 180,
                        "timeoutSeconds": 15
                     },
                     "name": "gitlab",
                     "ports": [
                        {
                           "containerPort": 8105,
                           "name": "registry"
                        },
                        {
                           "containerPort": 8065,
                           "name": "mattermost"
                        },
                        {
                           "containerPort": 8005,
                           "name": "workhorse"
                        },
                        {
                           "containerPort": 22,
                           "name": "ssh"
                        },
                        {
                           "containerPort": 9090,
                           "name": "prometheus"
                        },
                        {
                           "containerPort": 9100,
                           "name": "node-exporter"
                        }
                     ],
                     "readinessProbe": {
                        "httpGet": {
                           "path": "/help",
                           "port": 8005
                        },
                        "initialDelaySeconds": 15,
                        "timeoutSeconds": 1
                     },
                     "volumeMounts": [
                        {
                           "mountPath": "/etc/gitlab",
                           "name": "config",
                           "readOnly": false
                        },
                        {
                           "mountPath": "/gitlab-data",
                           "name": "data",
                           "readOnly": false
                        },
                        {
                           "mountPath": "/gitlab-registry",
                           "name": "registry",
                           "readOnly": false
                        },
                        {
                           "mountPath": "/patches",
                           "name": "patches",
                           "readOnly": true
                        }
                     ]
                  }
               ],
               "volumes": [
                  {
                     "name": "config",
                     "persistentVolumeClaim": {
                        "claimName": "gitlab-config-storage"
                     }
                  },
                  {
                     "name": "data",
                     "persistentVolumeClaim": {
                        "claimName": "gitlab-rails-storage"
                     }
                  },
                  {
                     "name": "registry",
                     "persistentVolumeClaim": {
                        "claimName": "gitlab-registry-storage"
                     }
                  },
                  {
                     "configMap": {
                        "name": "gitlab-patches"
                     },
                     "name": "patches"
                  }
               ]
            }
         }
      }
   },
   "gitlab-ns.json": {
      "apiVersion": "v1",
      "kind": "Namespace",
      "metadata": {
         "name": "gitlab"
      }
   },
   "gitlab-rails-storage.json": {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
         "annotations": {
            "volume.beta.kubernetes.io/storage-class": "fast"
         },
         "name": "gitlab-rails-storage",
         "namespace": "gitlab"
      },
      "spec": {
         "accessModes": [
            "ReadWriteMany"
         ],
         "resources": {
            "requests": {
               "storage": "30Gi"
            }
         }
      }
   },
   "gitlab-registry-storage.json": {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
         "annotations": {
            "volume.beta.kubernetes.io/storage-class": "fast"
         },
         "name": "gitlab-registry-storage",
         "namespace": "gitlab"
      },
      "spec": {
         "accessModes": [
            "ReadWriteMany"
         ],
         "resources": {
            "requests": {
               "storage": "30Gi"
            }
         }
      }
   },
   "gitlab-secrets.json": {
      "apiVersion": "v1",
      "data": {
         "initial_shared_runners_registration_token": "NDl1ZjNtenMxcWR6NXZnbw==",
         "mattermost_app_secret": "NDl1ZjNtenMxcWR6NXZnbw==",
         "postgres_password": "NDl1ZjNtenMxcWR6NXZnbw=="
      },
      "kind": "Secret",
      "metadata": {
         "name": "gitlab-secrets",
         "namespace": "gitlab"
      }
   },
   "gitlab-svc.json": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
         "annotations": { },
         "labels": {
            "name": "gitlab"
         },
         "name": "gitlab",
         "namespace": "gitlab"
      },
      "spec": {
         "ports": [
            {
               "name": "registry",
               "port": 8105,
               "targetPort": "registry"
            },
            {
               "name": "mattermost",
               "port": 8065,
               "targetPort": "mattermost"
            },
            {
               "name": "workhorse",
               "port": 8005,
               "targetPort": "workhorse"
            },
            {
               "name": "ssh",
               "port": 22,
               "targetPort": "ssh"
            },
            {
               "name": "prometheus",
               "port": 9090,
               "targetPort": "prometheus"
            },
            {
               "name": "node-exporter",
               "port": 9100,
               "targetPort": "node-exporter"
            }
         ],
         "selector": {
            "name": "gitlab"
         }
      }
   },
   "postgres-deployment.json": {
      "apiVersion": "extensions/v1beta1",
      "kind": "Deployment",
      "metadata": {
         "labels": { },
         "name": "gitlab-postgresql",
         "namespace": "gitlab"
      },
      "spec": {
         "replicas": 1,
         "template": {
            "metadata": {
               "annotations": { },
               "labels": {
                  "name": "gitlab-postgresql"
               }
            },
            "spec": {
               "containers": [
                  {
                     "env": [
                        {
                           "name": "POSTGRES_DB",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "postgres_db",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "POSTGRES_USER",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "postgres_user",
                                 "name": "gitlab-config"
                              }
                           }
                        },
                        {
                           "name": "POSTGRES_PASSWORD",
                           "valueFrom": {
                              "configMapKeyRef": {
                                 "key": "postgres_password",
                                 "name": "gitlab-secrets"
                              }
                           }
                        },
                        {
                           "name": "DB_EXTENSION",
                           "value": "pg_trgm"
                        }
                     ],
                     "image": "postgres:9.5.3",
                     "imagePullPolicy": "IfNotPresent",
                     "livenessProbe": {
                        "exec": {
                           "command": [
                              "pg_isready",
                              "-h",
                              "localhost",
                              "-U",
                              "postgres"
                           ]
                        },
                        "initialDelaySeconds": 30,
                        "timeoutSeconds": 5
                     },
                     "name": "gitlab-postgresql",
                     "ports": [
                        {
                           "containerPort": 5432,
                           "name": "postgres"
                        }
                     ],
                     "readinessProbe": {
                        "exec": {
                           "command": [
                              "pg_isready",
                              "-h",
                              "localhost",
                              "-U",
                              "postgres"
                           ]
                        },
                        "initialDelaySeconds": 5,
                        "timeoutSeconds": 1
                     },
                     "volumeMounts": [
                        {
                           "mountPath": "/var/lib/postgresql",
                           "name": "data",
                           "readOnly": false
                        },
                        {
                           "mountPath": "/docker-entrypoint-initdb.d",
                           "name": "initdb",
                           "readOnly": true
                        }
                     ]
                  }
               ],
               "volumes": [
                  {
                     "name": "data",
                     "persistentVolumeClaim": {
                        "claimName": "gitlab-postgresql-storage"
                     }
                  },
                  {
                     "configMap": {
                        "name": "gitlab-postgresql-initdb"
                     },
                     "name": "initdb"
                  }
               ]
            }
         }
      }
   },
   "postgres-svc.json": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
         "annotations": { },
         "labels": {
            "name": "gitlab-postgresql"
         },
         "name": "gitlab-postgresql",
         "namespace": "gitlab"
      },
      "spec": {
         "ports": [
            {
               "name": "postgres",
               "port": 5432,
               "targetPort": "postgres"
            }
         ],
         "selector": {
            "name": "gitlab-postgresql"
         }
      }
   },
   "postgresql-configmap.json": {
      "apiVersion": "v1",
      "data": {
         "01_create_mattermost_production.sql": "CREATE DATABASE mattermost_production WITH OWNER gitlab;"
      },
      "kind": "ConfigMap",
      "metadata": {
         "name": "gitlab-postgresql-initdb",
         "namespace": "gitlab"
      }
   },
   "postgresql-storage.json:": {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
         "annotations": {
            "volume.beta.kubernetes.io/storage-class": "fast"
         },
         "name": "gitlab-postgresql-storage",
         "namespace": "gitlab"
      },
      "spec": {
         "accessModes": [
            "ReadWriteOnce"
         ],
         "resources": {
            "requests": {
               "storage": "30Gi"
            }
         }
      }
   },
   "redis-deployment.json": {
      "apiVersion": "extensions/v1beta1",
      "kind": "Deployment",
      "metadata": {
         "labels": { },
         "name": "gitlab-redis",
         "namespace": "gitlab"
      },
      "spec": {
         "replicas": 1,
         "template": {
            "metadata": {
               "annotations": { },
               "labels": {
                  "name": "gitlab-redis"
               }
            },
            "spec": {
               "containers": [
                  {
                     "env": [ ],
                     "image": "redis:3.2.4",
                     "imagePullPolicy": "IfNotPresent",
                     "livenessProbe": {
                        "exec": {
                           "command": [
                              "redis-cli",
                              "ping"
                           ]
                        },
                        "initialDelaySeconds": 30,
                        "timeoutSeconds": 5
                     },
                     "name": "redis",
                     "ports": [
                        {
                           "containerPort": 6379,
                           "name": "redis"
                        }
                     ],
                     "readinessProbe": {
                        "exec": {
                           "command": [
                              "redis-cli",
                              "ping"
                           ]
                        },
                        "initialDelaySeconds": 5,
                        "timeoutSeconds": 1
                     },
                     "volumeMounts": [
                        {
                           "mountPath": "/var/lib/redis",
                           "name": "data",
                           "readOnly": false
                        }
                     ]
                  }
               ],
               "volumes": [
                  {
                     "name": "data",
                     "persistentVolumeClaim": {
                        "claimName": "gitlab-redis-storage"
                     }
                  }
               ]
            }
         }
      }
   },
   "redis-storage.json": {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
         "annotations": {
            "volume.beta.kubernetes.io/storage-class": "fast"
         },
         "name": "gitlab-redis-storage",
         "namespace": "gitlab"
      },
      "spec": {
         "accessModes": [
            "ReadWriteOnce"
         ],
         "resources": {
            "requests": {
               "storage": "5Gi"
            }
         }
      }
   },
   "redis-svc.json": {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
         "annotations": { },
         "labels": {
            "name": "gitlab-redis"
         },
         "name": "gitlab-redis",
         "namespace": "gitlab"
      },
      "spec": {
         "ports": [
            {
               "name": "redis",
               "port": 6379,
               "targetPort": "redis"
            }
         ],
         "selector": {
            "name": "gitlab-redis"
         }
      }
   }
}
